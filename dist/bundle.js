!function(g){var n={};function I(B){if(n[B])return n[B].exports;var t=n[B]={i:B,l:!1,exports:{}};return g[B].call(t.exports,t,t.exports,I),t.l=!0,t.exports}I.m=g,I.c=n,I.d=function(g,n,B){I.o(g,n)||Object.defineProperty(g,n,{enumerable:!0,get:B})},I.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},I.t=function(g,n){if(1&n&&(g=I(g)),8&n)return g;if(4&n&&"object"==typeof g&&g&&g.__esModule)return g;var B=Object.create(null);if(I.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:g}),2&n&&"string"!=typeof g)for(var t in g)I.d(B,t,function(n){return g[n]}.bind(null,t));return B},I.n=function(g){var n=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(n,"a",n),n},I.o=function(g,n){return Object.prototype.hasOwnProperty.call(g,n)},I.p="",I(I.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/lib/webgl-utils.js\n/*\n * Copyright 2010, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @fileoverview This file contains functions every webgl program will need\n * a version of one way or another.\n *\n * Instead of setting up a context manually it is recommended to\n * use. This will check for success or failure. On failure it\n * will attempt to present an approriate message to the user.\n *\n *       gl = WebGLUtils.setupWebGL(canvas);\n *\n * For animated WebGL apps use of setTimeout or setInterval are\n * discouraged. It is recommended you structure your rendering\n * loop like this.\n *\n *       function render() {\n *         window.requestAnimationFrame(render, canvas);\n *\n *         // do rendering\n *         ...\n *       }\n *       render();\n *\n * This will call your rendering function up to the refresh rate\n * of your display but will stop rendering if your app is not\n * visible.\n */\n\nlet WebGLUtils = (function() {\n  /**\n   * Creates the HTLM for a failure message\n   * @param {string} canvasContainerId id of container of th\n   *        canvas.\n   * @return {string} The html.\n   */\n  var makeFailHTML = function(msg) {\n    return (\n      '' +\n      '<div style=\"margin: auto; width:500px;z-index:10000;margin-top:20em;text-align:center;\">' +\n      msg +\n      '</div>'\n    )\n    return (\n      '' +\n      '<table style=\"background-color: #8CE; width: 100%; height: 100%;\"><tr>' +\n      '<td align=\"center\">' +\n      '<div style=\"display: table-cell; vertical-align: middle;\">' +\n      '<div style=\"\">' +\n      msg +\n      '</div>' +\n      '</div>' +\n      '</td></tr></table>'\n    )\n  }\n\n  /**\n   * Mesasge for getting a webgl browser\n   * @type {string}\n   */\n  var GET_A_WEBGL_BROWSER =\n    '' +\n    'This page requires a browser that supports WebGL.<br/>' +\n    '<a href=\"http://get.webgl.org\">Click here to upgrade your browser.</a>'\n\n  /**\n   * Mesasge for need better hardware\n   * @type {string}\n   */\n  var OTHER_PROBLEM =\n    '' +\n    \"It doesn't appear your computer can support WebGL.<br/>\" +\n    '<a href=\"http://get.webgl.org\">Click here for more information.</a>'\n\n  /**\n   * Creates a webgl context. If creation fails it will\n   * change the contents of the container of the <canvas>\n   * tag to an error message with the correct links for WebGL.\n   * @param {Element} canvas. The canvas element to create a\n   *     context from.\n   * @param {WebGLContextCreationAttirbutes} opt_attribs Any\n   *     creation attributes you want to pass in.\n   * @param {function:(msg)} opt_onError An function to call\n   *     if there is an error during creation.\n   * @return {WebGLRenderingContext} The created context.\n   */\n  var setupWebGL = function(canvas, opt_attribs, opt_onError) {\n    function handleCreationError(msg) {\n      var container = document.getElementsByTagName('body')[0]\n      //var container = canvas.parentNode;\n      if (container) {\n        var str = window.WebGLRenderingContext\n          ? OTHER_PROBLEM\n          : GET_A_WEBGL_BROWSER\n        if (msg) {\n          str += '<br/><br/>Status: ' + msg\n        }\n        container.innerHTML = makeFailHTML(str)\n      }\n    }\n\n    opt_onError = opt_onError || handleCreationError\n\n    if (canvas.addEventListener) {\n      canvas.addEventListener(\n        'webglcontextcreationerror',\n        function(event) {\n          opt_onError(event.statusMessage)\n        },\n        false\n      )\n    }\n    var context = create3DContext(canvas, opt_attribs)\n    if (!context) {\n      if (!window.WebGLRenderingContext) {\n        opt_onError('')\n      } else {\n        opt_onError('')\n      }\n    }\n\n    return context\n  }\n\n  /**\n   * Creates a webgl context.\n   * @param {!Canvas} canvas The canvas tag to get context\n   *     from. If one is not passed in one will be created.\n   * @return {!WebGLContext} The created context.\n   */\n  var create3DContext = function(canvas, opt_attribs) {\n    var names = ['webgl', 'experimental-webgl', 'webkit-3d', 'moz-webgl']\n    var context = null\n    for (var ii = 0; ii < names.length; ++ii) {\n      try {\n        context = canvas.getContext(names[ii], opt_attribs)\n      } catch (e) {}\n      if (context) {\n        break\n      }\n    }\n    return context\n  }\n\n  return {\n    create3DContext: create3DContext,\n    setupWebGL: setupWebGL\n  }\n})()\n\n/**\n * Provides requestAnimationFrame in a cross browser\n * way.\n */\nif (!window.requestAnimationFrame) {\n  window.requestAnimationFrame = (function() {\n    return (\n      window.requestAnimationFrame ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame ||\n      window.oRequestAnimationFrame ||\n      window.msRequestAnimationFrame ||\n      function(\n        /* function FrameRequestCallback */ callback,\n        /* DOMElement Element */ element\n      ) {\n        window.setTimeout(callback, 1000 / 60)\n      }\n    )\n  })()\n}\n\n/** * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec.\n *\n * Cancels an animation frame request.\n * Checks for cross-browser support, falls back to clearTimeout.\n * @param {number}  Animation frame request. */\nif (!window.cancelAnimationFrame) {\n  window.cancelAnimationFrame =\n    window.cancelRequestAnimationFrame ||\n    window.webkitCancelAnimationFrame ||\n    window.webkitCancelRequestAnimationFrame ||\n    window.mozCancelAnimationFrame ||\n    window.mozCancelRequestAnimationFrame ||\n    window.msCancelAnimationFrame ||\n    window.msCancelRequestAnimationFrame ||\n    window.oCancelAnimationFrame ||\n    window.oCancelRequestAnimationFrame ||\n    window.clearTimeout\n}\n\n\n\n// CONCATENATED MODULE: ./src/lib/webgl-debug.js\n//Copyright (c) 2009 The Chromium Authors. All rights reserved.\n//Use of this source code is governed by a BSD-style license that can be\n//found in the LICENSE file.\n\n// Various functions for helping debug WebGL apps.\n\nlet WebGLDebugUtils = (function() {\n  /**\n   * Wrapped logging function.\n   * @param {string} msg Message to log.\n   */\n  var log = function(msg) {\n    if (window.console && window.console.log) {\n      window.console.log(msg)\n    }\n  }\n\n  /**\n   * Which arguements are enums.\n   * @type {!Object.<number, string>}\n   */\n  var glValidEnumContexts = {\n    // Generic setters and getters\n\n    enable: { 0: true },\n    disable: { 0: true },\n    getParameter: { 0: true },\n\n    // Rendering\n\n    drawArrays: { 0: true },\n    drawElements: { 0: true, 2: true },\n\n    // Shaders\n\n    createShader: { 0: true },\n    getShaderParameter: { 1: true },\n    getProgramParameter: { 1: true },\n\n    // Vertex attributes\n\n    getVertexAttrib: { 1: true },\n    vertexAttribPointer: { 2: true },\n\n    // Textures\n\n    bindTexture: { 0: true },\n    activeTexture: { 0: true },\n    getTexParameter: { 0: true, 1: true },\n    texParameterf: { 0: true, 1: true },\n    texParameteri: { 0: true, 1: true, 2: true },\n    texImage2D: { 0: true, 2: true, 6: true, 7: true },\n    texSubImage2D: { 0: true, 6: true, 7: true },\n    copyTexImage2D: { 0: true, 2: true },\n    copyTexSubImage2D: { 0: true },\n    generateMipmap: { 0: true },\n\n    // Buffer objects\n\n    bindBuffer: { 0: true },\n    bufferData: { 0: true, 2: true },\n    bufferSubData: { 0: true },\n    getBufferParameter: { 0: true, 1: true },\n\n    // Renderbuffers and framebuffers\n\n    pixelStorei: { 0: true, 1: true },\n    readPixels: { 4: true, 5: true },\n    bindRenderbuffer: { 0: true },\n    bindFramebuffer: { 0: true },\n    checkFramebufferStatus: { 0: true },\n    framebufferRenderbuffer: { 0: true, 1: true, 2: true },\n    framebufferTexture2D: { 0: true, 1: true, 2: true },\n    getFramebufferAttachmentParameter: { 0: true, 1: true, 2: true },\n    getRenderbufferParameter: { 0: true, 1: true },\n    renderbufferStorage: { 0: true, 1: true },\n\n    // Frame buffer operations (clear, blend, depth test, stencil)\n\n    clear: { 0: true },\n    depthFunc: { 0: true },\n    blendFunc: { 0: true, 1: true },\n    blendFuncSeparate: { 0: true, 1: true, 2: true, 3: true },\n    blendEquation: { 0: true },\n    blendEquationSeparate: { 0: true, 1: true },\n    stencilFunc: { 0: true },\n    stencilFuncSeparate: { 0: true, 1: true },\n    stencilMaskSeparate: { 0: true },\n    stencilOp: { 0: true, 1: true, 2: true },\n    stencilOpSeparate: { 0: true, 1: true, 2: true, 3: true },\n\n    // Culling\n\n    cullFace: { 0: true },\n    frontFace: { 0: true }\n  }\n\n  /**\n   * Map of numbers to names.\n   * @type {Object}\n   */\n  var glEnums = null\n\n  /**\n   * Initializes this module. Safe to call more than once.\n   * @param {!WebGLRenderingContext} ctx A WebGL context. If\n   *    you have more than one context it doesn't matter which one\n   *    you pass in, it is only used to pull out constants.\n   */\n  function init(ctx) {\n    if (glEnums == null) {\n      glEnums = {}\n      for (var propertyName in ctx) {\n        if (typeof ctx[propertyName] == 'number') {\n          glEnums[ctx[propertyName]] = propertyName\n        }\n      }\n    }\n  }\n\n  /**\n   * Checks the utils have been initialized.\n   */\n  function checkInit() {\n    if (glEnums == null) {\n      throw 'WebGLDebugUtils.init(ctx) not called'\n    }\n  }\n\n  /**\n   * Returns true or false if value matches any WebGL enum\n   * @param {*} value Value to check if it might be an enum.\n   * @return {boolean} True if value matches one of the WebGL defined enums\n   */\n  function mightBeEnum(value) {\n    checkInit()\n    return glEnums[value] !== undefined\n  }\n\n  /**\n   * Gets an string version of an WebGL enum.\n   *\n   * Example:\n   *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());\n   *\n   * @param {number} value Value to return an enum for\n   * @return {string} The string version of the enum.\n   */\n  function glEnumToString(value) {\n    checkInit()\n    var name = glEnums[value]\n    return name !== undefined\n      ? name\n      : '*UNKNOWN WebGL ENUM (0x' + value.toString(16) + ')'\n  }\n\n  /**\n   * Returns the string version of a WebGL argument.\n   * Attempts to convert enum arguments to strings.\n   * @param {string} functionName the name of the WebGL function.\n   * @param {number} argumentIndx the index of the argument.\n   * @param {*} value The value of the argument.\n   * @return {string} The value as a string.\n   */\n  function glFunctionArgToString(functionName, argumentIndex, value) {\n    var funcInfo = glValidEnumContexts[functionName]\n    if (funcInfo !== undefined) {\n      if (funcInfo[argumentIndex]) {\n        return glEnumToString(value)\n      }\n    }\n    return value.toString()\n  }\n\n  /**\n   * Given a WebGL context returns a wrapped context that calls\n   * gl.getError after every command and calls a function if the\n   * result is not gl.NO_ERROR.\n   *\n   * @param {!WebGLRenderingContext} ctx The webgl context to\n   *        wrap.\n   * @param {!function(err, funcName, args): void} opt_onErrorFunc\n   *        The function to call when gl.getError returns an\n   *        error. If not specified the default function calls\n   *        console.log with a message.\n   */\n  function makeDebugContext(ctx, opt_onErrorFunc) {\n    init(ctx)\n    opt_onErrorFunc =\n      opt_onErrorFunc ||\n      function(err, functionName, args) {\n        // apparently we can't do args.join(\",\");\n        var argStr = ''\n        for (var ii = 0; ii < args.length; ++ii) {\n          argStr +=\n            (ii == 0 ? '' : ', ') +\n            glFunctionArgToString(functionName, ii, args[ii])\n        }\n        log(\n          'WebGL error ' +\n            glEnumToString(err) +\n            ' in ' +\n            functionName +\n            '(' +\n            argStr +\n            ')'\n        )\n      }\n\n    // Holds booleans for each GL error so after we get the error ourselves\n    // we can still return it to the client app.\n    var glErrorShadow = {}\n\n    // Makes a function that calls a WebGL function and then calls getError.\n    function makeErrorWrapper(ctx, functionName) {\n      return function() {\n        var result = ctx[functionName].apply(ctx, arguments)\n        var err = ctx.getError()\n        if (err != 0) {\n          glErrorShadow[err] = true\n          opt_onErrorFunc(err, functionName, arguments)\n        }\n        return result\n      }\n    }\n\n    // Make a an object that has a copy of every property of the WebGL context\n    // but wraps all functions.\n    var wrapper = {}\n    for (var propertyName in ctx) {\n      if (typeof ctx[propertyName] == 'function') {\n        wrapper[propertyName] = makeErrorWrapper(ctx, propertyName)\n      } else {\n        wrapper[propertyName] = ctx[propertyName]\n      }\n    }\n\n    // Override the getError function with one that returns our saved results.\n    wrapper.getError = function() {\n      for (var err in glErrorShadow) {\n        if (glErrorShadow[err]) {\n          glErrorShadow[err] = false\n          return err\n        }\n      }\n      return ctx.NO_ERROR\n    }\n\n    return wrapper\n  }\n\n  function resetToInitialState(ctx) {\n    var numAttribs = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS)\n    var tmp = ctx.createBuffer()\n    ctx.bindBuffer(ctx.ARRAY_BUFFER, tmp)\n    for (var ii = 0; ii < numAttribs; ++ii) {\n      ctx.disableVertexAttribArray(ii)\n      ctx.vertexAttribPointer(ii, 4, ctx.FLOAT, false, 0, 0)\n      ctx.vertexAttrib1f(ii, 0)\n    }\n    ctx.deleteBuffer(tmp)\n\n    var numTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS)\n    for (var ii = 0; ii < numTextureUnits; ++ii) {\n      ctx.activeTexture(ctx.TEXTURE0 + ii)\n      ctx.bindTexture(ctx.TEXTURE_CUBE_MAP, null)\n      ctx.bindTexture(ctx.TEXTURE_2D, null)\n    }\n\n    ctx.activeTexture(ctx.TEXTURE0)\n    ctx.useProgram(null)\n    ctx.bindBuffer(ctx.ARRAY_BUFFER, null)\n    ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, null)\n    ctx.bindFramebuffer(ctx.FRAMEBUFFER, null)\n    ctx.bindRenderbuffer(ctx.RENDERBUFFER, null)\n    ctx.disable(ctx.BLEND)\n    ctx.disable(ctx.CULL_FACE)\n    ctx.disable(ctx.DEPTH_TEST)\n    ctx.disable(ctx.DITHER)\n    ctx.disable(ctx.SCISSOR_TEST)\n    ctx.blendColor(0, 0, 0, 0)\n    ctx.blendEquation(ctx.FUNC_ADD)\n    ctx.blendFunc(ctx.ONE, ctx.ZERO)\n    ctx.clearColor(0, 0, 0, 0)\n    ctx.clearDepth(1)\n    ctx.clearStencil(-1)\n    ctx.colorMask(true, true, true, true)\n    ctx.cullFace(ctx.BACK)\n    ctx.depthFunc(ctx.LESS)\n    ctx.depthMask(true)\n    ctx.depthRange(0, 1)\n    ctx.frontFace(ctx.CCW)\n    ctx.hint(ctx.GENERATE_MIPMAP_HINT, ctx.DONT_CARE)\n    ctx.lineWidth(1)\n    ctx.pixelStorei(ctx.PACK_ALIGNMENT, 4)\n    ctx.pixelStorei(ctx.UNPACK_ALIGNMENT, 4)\n    ctx.pixelStorei(ctx.UNPACK_FLIP_Y_WEBGL, false)\n    ctx.pixelStorei(ctx.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false)\n    // TODO: Delete this IF.\n    if (ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL) {\n      ctx.pixelStorei(\n        ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL,\n        ctx.BROWSER_DEFAULT_WEBGL\n      )\n    }\n    ctx.polygonOffset(0, 0)\n    ctx.sampleCoverage(1, false)\n    ctx.scissor(0, 0, ctx.canvas.width, ctx.canvas.height)\n    ctx.stencilFunc(ctx.ALWAYS, 0, 0xffffffff)\n    ctx.stencilMask(0xffffffff)\n    ctx.stencilOp(ctx.KEEP, ctx.KEEP, ctx.KEEP)\n    ctx.viewport(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight)\n    ctx.clear(\n      ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT | ctx.STENCIL_BUFFER_BIT\n    )\n\n    // TODO: This should NOT be needed but Firefox fails with 'hint'\n    while (ctx.getError());\n  }\n\n  function makeLostContextSimulatingContext(ctx) {\n    var wrapper_ = {}\n    var contextId_ = 1\n    var contextLost_ = false\n    var resourceId_ = 0\n    var resourceDb_ = []\n    var onLost_ = undefined\n    var onRestored_ = undefined\n    var nextOnRestored_ = undefined\n\n    // Holds booleans for each GL error so can simulate errors.\n    var glErrorShadow_ = {}\n\n    function isWebGLObject(obj) {\n      //return false;\n      return (\n        obj instanceof WebGLBuffer ||\n        obj instanceof WebGLFramebuffer ||\n        obj instanceof WebGLProgram ||\n        obj instanceof WebGLRenderbuffer ||\n        obj instanceof WebGLShader ||\n        obj instanceof WebGLTexture\n      )\n    }\n\n    function checkResources(args) {\n      for (var ii = 0; ii < args.length; ++ii) {\n        var arg = args[ii]\n        if (isWebGLObject(arg)) {\n          return arg.__webglDebugContextLostId__ == contextId_\n        }\n      }\n      return true\n    }\n\n    function clearErrors() {\n      var k = Object.keys(glErrorShadow_)\n      for (var ii = 0; ii < k.length; ++ii) {\n        delete glErrorShdow_[k]\n      }\n    }\n\n    // Makes a function that simulates WebGL when out of context.\n    function makeLostContextWrapper(ctx, functionName) {\n      var f = ctx[functionName]\n      return function() {\n        // Only call the functions if the context is not lost.\n        if (!contextLost_) {\n          if (!checkResources(arguments)) {\n            glErrorShadow_[ctx.INVALID_OPERATION] = true\n            return\n          }\n          var result = f.apply(ctx, arguments)\n          return result\n        }\n      }\n    }\n\n    for (var propertyName in ctx) {\n      if (typeof ctx[propertyName] == 'function') {\n        wrapper_[propertyName] = makeLostContextWrapper(ctx, propertyName)\n      } else {\n        wrapper_[propertyName] = ctx[propertyName]\n      }\n    }\n\n    function makeWebGLContextEvent(statusMessage) {\n      return { statusMessage: statusMessage }\n    }\n\n    function freeResources() {\n      for (var ii = 0; ii < resourceDb_.length; ++ii) {\n        var resource = resourceDb_[ii]\n        if (resource instanceof WebGLBuffer) {\n          ctx.deleteBuffer(resource)\n        } else if (resource instanceof WebctxFramebuffer) {\n          ctx.deleteFramebuffer(resource)\n        } else if (resource instanceof WebctxProgram) {\n          ctx.deleteProgram(resource)\n        } else if (resource instanceof WebctxRenderbuffer) {\n          ctx.deleteRenderbuffer(resource)\n        } else if (resource instanceof WebctxShader) {\n          ctx.deleteShader(resource)\n        } else if (resource instanceof WebctxTexture) {\n          ctx.deleteTexture(resource)\n        }\n      }\n    }\n\n    wrapper_.loseContext = function() {\n      if (!contextLost_) {\n        contextLost_ = true\n        ++contextId_\n        while (ctx.getError());\n        clearErrors()\n        glErrorShadow_[ctx.CONTEXT_LOST_WEBGL] = true\n        setTimeout(function() {\n          if (onLost_) {\n            onLost_(makeWebGLContextEvent('context lost'))\n          }\n        }, 0)\n      }\n    }\n\n    wrapper_.restoreContext = function() {\n      if (contextLost_) {\n        if (onRestored_) {\n          setTimeout(function() {\n            freeResources()\n            resetToInitialState(ctx)\n            contextLost_ = false\n            if (onRestored_) {\n              var callback = onRestored_\n              onRestored_ = nextOnRestored_\n              nextOnRestored_ = undefined\n              callback(makeWebGLContextEvent('context restored'))\n            }\n          }, 0)\n        } else {\n          throw 'You can not restore the context without a listener'\n        }\n      }\n    }\n\n    // Wrap a few functions specially.\n    wrapper_.getError = function() {\n      if (!contextLost_) {\n        var err\n        while ((err = ctx.getError())) {\n          glErrorShadow_[err] = true\n        }\n      }\n      for (var err in glErrorShadow_) {\n        if (glErrorShadow_[err]) {\n          delete glErrorShadow_[err]\n          return err\n        }\n      }\n      return ctx.NO_ERROR\n    }\n\n    var creationFunctions = [\n      'createBuffer',\n      'createFramebuffer',\n      'createProgram',\n      'createRenderbuffer',\n      'createShader',\n      'createTexture'\n    ]\n    for (var ii = 0; ii < creationFunctions.length; ++ii) {\n      var functionName = creationFunctions[ii]\n      wrapper_[functionName] = (function(f) {\n        return function() {\n          if (contextLost_) {\n            return null\n          }\n          var obj = f.apply(ctx, arguments)\n          obj.__webglDebugContextLostId__ = contextId_\n          resourceDb_.push(obj)\n          return obj\n        }\n      })(ctx[functionName])\n    }\n\n    var functionsThatShouldReturnNull = [\n      'getActiveAttrib',\n      'getActiveUniform',\n      'getBufferParameter',\n      'getContextAttributes',\n      'getAttachedShaders',\n      'getFramebufferAttachmentParameter',\n      'getParameter',\n      'getProgramParameter',\n      'getProgramInfoLog',\n      'getRenderbufferParameter',\n      'getShaderParameter',\n      'getShaderInfoLog',\n      'getShaderSource',\n      'getTexParameter',\n      'getUniform',\n      'getUniformLocation',\n      'getVertexAttrib'\n    ]\n    for (var ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {\n      var functionName = functionsThatShouldReturnNull[ii]\n      wrapper_[functionName] = (function(f) {\n        return function() {\n          if (contextLost_) {\n            return null\n          }\n          return f.apply(ctx, arguments)\n        }\n      })(wrapper_[functionName])\n    }\n\n    var isFunctions = [\n      'isBuffer',\n      'isEnabled',\n      'isFramebuffer',\n      'isProgram',\n      'isRenderbuffer',\n      'isShader',\n      'isTexture'\n    ]\n    for (var ii = 0; ii < isFunctions.length; ++ii) {\n      var functionName = isFunctions[ii]\n      wrapper_[functionName] = (function(f) {\n        return function() {\n          if (contextLost_) {\n            return false\n          }\n          return f.apply(ctx, arguments)\n        }\n      })(wrapper_[functionName])\n    }\n\n    wrapper_.checkFramebufferStatus = (function(f) {\n      return function() {\n        if (contextLost_) {\n          return ctx.FRAMEBUFFER_UNSUPPORTED\n        }\n        return f.apply(ctx, arguments)\n      }\n    })(wrapper_.checkFramebufferStatus)\n\n    wrapper_.getAttribLocation = (function(f) {\n      return function() {\n        if (contextLost_) {\n          return -1\n        }\n        return f.apply(ctx, arguments)\n      }\n    })(wrapper_.getAttribLocation)\n\n    wrapper_.getVertexAttribOffset = (function(f) {\n      return function() {\n        if (contextLost_) {\n          return 0\n        }\n        return f.apply(ctx, arguments)\n      }\n    })(wrapper_.getVertexAttribOffset)\n\n    wrapper_.isContextLost = function() {\n      return contextLost_\n    }\n\n    function wrapEvent(listener) {\n      if (typeof listener == 'function') {\n        return listener\n      } else {\n        return function(info) {\n          listener.handleEvent(info)\n        }\n      }\n    }\n\n    wrapper_.registerOnContextLostListener = function(listener) {\n      onLost_ = wrapEvent(listener)\n    }\n\n    wrapper_.registerOnContextRestoredListener = function(listener) {\n      if (contextLost_) {\n        nextOnRestored_ = wrapEvent(listener)\n      } else {\n        onRestored_ = wrapEvent(listener)\n      }\n    }\n\n    return wrapper_\n  }\n\n  return {\n    /**\n     * Initializes this module. Safe to call more than once.\n     * @param {!WebGLRenderingContext} ctx A WebGL context. If\n     *    you have more than one context it doesn't matter which one\n     *    you pass in, it is only used to pull out constants.\n     */\n    init: init,\n\n    /**\n     * Returns true or false if value matches any WebGL enum\n     * @param {*} value Value to check if it might be an enum.\n     * @return {boolean} True if value matches one of the WebGL defined enums\n     */\n    mightBeEnum: mightBeEnum,\n\n    /**\n     * Gets an string version of an WebGL enum.\n     *\n     * Example:\n     *   WebGLDebugUtil.init(ctx);\n     *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());\n     *\n     * @param {number} value Value to return an enum for\n     * @return {string} The string version of the enum.\n     */\n    glEnumToString: glEnumToString,\n\n    /**\n     * Converts the argument of a WebGL function to a string.\n     * Attempts to convert enum arguments to strings.\n     *\n     * Example:\n     *   WebGLDebugUtil.init(ctx);\n     *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 0, gl.TEXTURE_2D);\n     *\n     * would return 'TEXTURE_2D'\n     *\n     * @param {string} functionName the name of the WebGL function.\n     * @param {number} argumentIndx the index of the argument.\n     * @param {*} value The value of the argument.\n     * @return {string} The value as a string.\n     */\n    glFunctionArgToString: glFunctionArgToString,\n\n    /**\n     * Given a WebGL context returns a wrapped context that calls\n     * gl.getError after every command and calls a function if the\n     * result is not NO_ERROR.\n     *\n     * You can supply your own function if you want. For example, if you'd like\n     * an exception thrown on any GL error you could do this\n     *\n     *    function throwOnGLError(err, funcName, args) {\n     *      throw WebGLDebugUtils.glEnumToString(err) + \" was caused by call to\" +\n     *            funcName;\n     *    };\n     *\n     *    ctx = WebGLDebugUtils.makeDebugContext(\n     *        canvas.getContext(\"webgl\"), throwOnGLError);\n     *\n     * @param {!WebGLRenderingContext} ctx The webgl context to wrap.\n     * @param {!function(err, funcName, args): void} opt_onErrorFunc The function\n     *     to call when gl.getError returns an error. If not specified the default\n     *     function calls console.log with a message.\n     */\n    makeDebugContext: makeDebugContext,\n\n    /**\n     * Given a WebGL context returns a wrapped context that adds 4\n     * functions.\n     *\n     * ctx.loseContext:\n     *   simulates a lost context event.\n     *\n     * ctx.restoreContext:\n     *   simulates the context being restored.\n     *\n     * ctx.registerOnContextLostListener(listener):\n     *   lets you register a listener for context lost. Use instead\n     *   of addEventListener('webglcontextlostevent', listener);\n     *\n     * ctx.registerOnContextRestoredListener(listener):\n     *   lets you register a listener for context restored. Use\n     *   instead of addEventListener('webglcontextrestored',\n     *   listener);\n     *\n     * @param {!WebGLRenderingContext} ctx The webgl context to wrap.\n     */\n    makeLostContextSimulatingContext: makeLostContextSimulatingContext,\n\n    /**\n     * Resets a context to the initial state.\n     * @param {!WebGLRenderingContext} ctx The webgl context to\n     *     reset.\n     */\n    resetToInitialState: resetToInitialState\n  }\n})()\n\n\n\n// CONCATENATED MODULE: ./src/lib/cuon-utils.js\n\n\n\n// cuon-utils.js (c) 2012 kanda and matsuda\n/**\n * Create a program object and make current\n * @param gl GL context\n * @param vshader a vertex shader program (string)\n * @param fshader a fragment shader program (string)\n * @return true, if the program object was created and successfully made current\n */\nfunction initShaders(gl, vshader, fshader) {\n  var program = createProgram(gl, vshader, fshader)\n  if (!program) {\n    console.log('Failed to create program')\n    return false\n  }\n\n  gl.useProgram(program)\n  gl.program = program\n\n  return true\n}\n\nfunction useProgram(gl, program) {\n  gl.useProgram(program)\n  gl.program = program\n}\n\n/**\n * Create the linked program object\n * @param gl GL context\n * @param vshader a vertex shader program (string)\n * @param fshader a fragment shader program (string)\n * @return created program object, or null if the creation has failed\n */\nfunction createProgram(gl, vshader, fshader) {\n  // Create shader object\n  var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader)\n  var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader)\n  if (!vertexShader || !fragmentShader) {\n    return null\n  }\n\n  // Create a program object\n  var program = gl.createProgram()\n  if (!program) {\n    return null\n  }\n\n  // Attach the shader objects\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n\n  // Link the program object\n  gl.linkProgram(program)\n\n  // Check the result of linking\n  var linked = gl.getProgramParameter(program, gl.LINK_STATUS)\n  if (!linked) {\n    var error = gl.getProgramInfoLog(program)\n    console.log('Failed to link program: ' + error)\n    gl.deleteProgram(program)\n    gl.deleteShader(fragmentShader)\n    gl.deleteShader(vertexShader)\n    return null\n  }\n  return program\n}\n\n/**\n * Create a shader object\n * @param gl GL context\n * @param type the type of the shader object to be created\n * @param source shader program (string)\n * @return created shader object, or null if the creation has failed.\n */\nfunction loadShader(gl, type, source) {\n  // Create shader object\n  var shader = gl.createShader(type)\n  if (shader == null) {\n    console.log('unable to create shader')\n    return null\n  }\n\n  // Set the shader program\n  gl.shaderSource(shader, source)\n\n  // Compile the shader\n  gl.compileShader(shader)\n\n  // Check the result of compilation\n  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n  if (!compiled) {\n    var error = gl.getShaderInfoLog(shader)\n    console.log('Failed to compile shader: ' + error)\n    gl.deleteShader(shader)\n    return null\n  }\n\n  return shader\n}\n\n/**\n * Initialize and get the rendering for WebGL\n * @param canvas <cavnas> element\n * @param opt_debug flag to initialize the context for debugging\n * @return the rendering context for WebGL\n */\nfunction getWebGLContext(canvas, opt_debug) {\n  // Get the rendering context for WebGL\n  var gl = WebGLUtils.setupWebGL(canvas)\n  if (!gl) return null\n\n  // if opt_debug is explicitly false, create the context for debugging\n  if (arguments.length < 2 || opt_debug) {\n    gl = WebGLDebugUtils.makeDebugContext(gl)\n  }\n\n  return gl\n}\n\n\n\n// CONCATENATED MODULE: ./src/lib/cuon-matrix.js\n// cuon-matrix.js (c) 2012 kanda and matsuda\n/**\n * This is a class treating 4x4 matrix.\n * This class contains the function that is equivalent to OpenGL matrix stack.\n * The matrix after conversion is calculated by multiplying a conversion matrix from the right.\n * The matrix is replaced by the calculated result.\n */\n\n/**\n * Constructor of Matrix4\n * If opt_src is specified, new matrix is initialized by opt_src.\n * Otherwise, new matrix is initialized by identity matrix.\n * @param opt_src source matrix(option)\n */\nvar Matrix4 = function(opt_src) {\n  var i, s, d\n  if (\n    opt_src &&\n    typeof opt_src === 'object' &&\n    opt_src.hasOwnProperty('elements')\n  ) {\n    s = opt_src.elements\n    d = new Float32Array(16)\n    for (i = 0; i < 16; ++i) {\n      d[i] = s[i]\n    }\n    this.elements = d\n  } else {\n    this.elements = new Float32Array([\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1\n    ])\n  }\n}\n\n/**\n * Set the identity matrix.\n * @return this\n */\nMatrix4.prototype.setIdentity = function() {\n  var e = this.elements\n  e[0] = 1\n  e[4] = 0\n  e[8] = 0\n  e[12] = 0\n  e[1] = 0\n  e[5] = 1\n  e[9] = 0\n  e[13] = 0\n  e[2] = 0\n  e[6] = 0\n  e[10] = 1\n  e[14] = 0\n  e[3] = 0\n  e[7] = 0\n  e[11] = 0\n  e[15] = 1\n  return this\n}\n\n/**\n * Copy matrix.\n * @param src source matrix\n * @return this\n */\nMatrix4.prototype.set = function(src) {\n  var i, s, d\n\n  s = src.elements\n  d = this.elements\n\n  if (s === d) {\n    return\n  }\n\n  for (i = 0; i < 16; ++i) {\n    d[i] = s[i]\n  }\n\n  return this\n}\n\n/**\n * Multiply the matrix from the right.\n * @param other The multiply matrix\n * @return this\n */\nMatrix4.prototype.concat = function(other) {\n  var i, e, a, b, ai0, ai1, ai2, ai3\n\n  // Calculate e = a * b\n  e = this.elements\n  a = this.elements\n  b = other.elements\n\n  // If e equals b, copy b to temporary matrix.\n  if (e === b) {\n    b = new Float32Array(16)\n    for (i = 0; i < 16; ++i) {\n      b[i] = e[i]\n    }\n  }\n\n  for (i = 0; i < 4; i++) {\n    ai0 = a[i]\n    ai1 = a[i + 4]\n    ai2 = a[i + 8]\n    ai3 = a[i + 12]\n    e[i] = ai0 * b[0] + ai1 * b[1] + ai2 * b[2] + ai3 * b[3]\n    e[i + 4] = ai0 * b[4] + ai1 * b[5] + ai2 * b[6] + ai3 * b[7]\n    e[i + 8] = ai0 * b[8] + ai1 * b[9] + ai2 * b[10] + ai3 * b[11]\n    e[i + 12] = ai0 * b[12] + ai1 * b[13] + ai2 * b[14] + ai3 * b[15]\n  }\n\n  return this\n}\nMatrix4.prototype.multiply = Matrix4.prototype.concat\n\n/**\n * Multiply the three-dimensional vector.\n * @param pos  The multiply vector\n * @return The result of multiplication(Float32Array)\n */\nMatrix4.prototype.multiplyVector3 = function(pos) {\n  var e = this.elements\n  var p = pos.elements\n  var v = new Vector3()\n  var result = v.elements\n\n  result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[8] + e[12]\n  result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[9] + e[13]\n  result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + e[14]\n\n  return v\n}\n\n/**\n * Multiply the four-dimensional vector.\n * @param pos  The multiply vector\n * @return The result of multiplication(Float32Array)\n */\nMatrix4.prototype.multiplyVector4 = function(pos) {\n  var e = this.elements\n  var p = pos.elements\n  var v = new Vector4()\n  var result = v.elements\n\n  result[0] = p[0] * e[0] + p[1] * e[4] + p[2] * e[8] + p[3] * e[12]\n  result[1] = p[0] * e[1] + p[1] * e[5] + p[2] * e[9] + p[3] * e[13]\n  result[2] = p[0] * e[2] + p[1] * e[6] + p[2] * e[10] + p[3] * e[14]\n  result[3] = p[0] * e[3] + p[1] * e[7] + p[2] * e[11] + p[3] * e[15]\n\n  return v\n}\n\n/**\n * Transpose the matrix.\n * @return this\n */\nMatrix4.prototype.transpose = function() {\n  var e, t\n\n  e = this.elements\n\n  t = e[1]\n  e[1] = e[4]\n  e[4] = t\n  t = e[2]\n  e[2] = e[8]\n  e[8] = t\n  t = e[3]\n  e[3] = e[12]\n  e[12] = t\n  t = e[6]\n  e[6] = e[9]\n  e[9] = t\n  t = e[7]\n  e[7] = e[13]\n  e[13] = t\n  t = e[11]\n  e[11] = e[14]\n  e[14] = t\n\n  return this\n}\n\n/**\n * Calculate the inverse matrix of specified matrix, and set to this.\n * @param other The source matrix\n * @return this\n */\nMatrix4.prototype.setInverseOf = function(other) {\n  var i, s, d, inv, det\n\n  s = other.elements\n  d = this.elements\n  inv = new Float32Array(16)\n\n  inv[0] =\n    s[5] * s[10] * s[15] -\n    s[5] * s[11] * s[14] -\n    s[9] * s[6] * s[15] +\n    s[9] * s[7] * s[14] +\n    s[13] * s[6] * s[11] -\n    s[13] * s[7] * s[10]\n  inv[4] =\n    -s[4] * s[10] * s[15] +\n    s[4] * s[11] * s[14] +\n    s[8] * s[6] * s[15] -\n    s[8] * s[7] * s[14] -\n    s[12] * s[6] * s[11] +\n    s[12] * s[7] * s[10]\n  inv[8] =\n    s[4] * s[9] * s[15] -\n    s[4] * s[11] * s[13] -\n    s[8] * s[5] * s[15] +\n    s[8] * s[7] * s[13] +\n    s[12] * s[5] * s[11] -\n    s[12] * s[7] * s[9]\n  inv[12] =\n    -s[4] * s[9] * s[14] +\n    s[4] * s[10] * s[13] +\n    s[8] * s[5] * s[14] -\n    s[8] * s[6] * s[13] -\n    s[12] * s[5] * s[10] +\n    s[12] * s[6] * s[9]\n\n  inv[1] =\n    -s[1] * s[10] * s[15] +\n    s[1] * s[11] * s[14] +\n    s[9] * s[2] * s[15] -\n    s[9] * s[3] * s[14] -\n    s[13] * s[2] * s[11] +\n    s[13] * s[3] * s[10]\n  inv[5] =\n    s[0] * s[10] * s[15] -\n    s[0] * s[11] * s[14] -\n    s[8] * s[2] * s[15] +\n    s[8] * s[3] * s[14] +\n    s[12] * s[2] * s[11] -\n    s[12] * s[3] * s[10]\n  inv[9] =\n    -s[0] * s[9] * s[15] +\n    s[0] * s[11] * s[13] +\n    s[8] * s[1] * s[15] -\n    s[8] * s[3] * s[13] -\n    s[12] * s[1] * s[11] +\n    s[12] * s[3] * s[9]\n  inv[13] =\n    s[0] * s[9] * s[14] -\n    s[0] * s[10] * s[13] -\n    s[8] * s[1] * s[14] +\n    s[8] * s[2] * s[13] +\n    s[12] * s[1] * s[10] -\n    s[12] * s[2] * s[9]\n\n  inv[2] =\n    s[1] * s[6] * s[15] -\n    s[1] * s[7] * s[14] -\n    s[5] * s[2] * s[15] +\n    s[5] * s[3] * s[14] +\n    s[13] * s[2] * s[7] -\n    s[13] * s[3] * s[6]\n  inv[6] =\n    -s[0] * s[6] * s[15] +\n    s[0] * s[7] * s[14] +\n    s[4] * s[2] * s[15] -\n    s[4] * s[3] * s[14] -\n    s[12] * s[2] * s[7] +\n    s[12] * s[3] * s[6]\n  inv[10] =\n    s[0] * s[5] * s[15] -\n    s[0] * s[7] * s[13] -\n    s[4] * s[1] * s[15] +\n    s[4] * s[3] * s[13] +\n    s[12] * s[1] * s[7] -\n    s[12] * s[3] * s[5]\n  inv[14] =\n    -s[0] * s[5] * s[14] +\n    s[0] * s[6] * s[13] +\n    s[4] * s[1] * s[14] -\n    s[4] * s[2] * s[13] -\n    s[12] * s[1] * s[6] +\n    s[12] * s[2] * s[5]\n\n  inv[3] =\n    -s[1] * s[6] * s[11] +\n    s[1] * s[7] * s[10] +\n    s[5] * s[2] * s[11] -\n    s[5] * s[3] * s[10] -\n    s[9] * s[2] * s[7] +\n    s[9] * s[3] * s[6]\n  inv[7] =\n    s[0] * s[6] * s[11] -\n    s[0] * s[7] * s[10] -\n    s[4] * s[2] * s[11] +\n    s[4] * s[3] * s[10] +\n    s[8] * s[2] * s[7] -\n    s[8] * s[3] * s[6]\n  inv[11] =\n    -s[0] * s[5] * s[11] +\n    s[0] * s[7] * s[9] +\n    s[4] * s[1] * s[11] -\n    s[4] * s[3] * s[9] -\n    s[8] * s[1] * s[7] +\n    s[8] * s[3] * s[5]\n  inv[15] =\n    s[0] * s[5] * s[10] -\n    s[0] * s[6] * s[9] -\n    s[4] * s[1] * s[10] +\n    s[4] * s[2] * s[9] +\n    s[8] * s[1] * s[6] -\n    s[8] * s[2] * s[5]\n\n  det = s[0] * inv[0] + s[1] * inv[4] + s[2] * inv[8] + s[3] * inv[12]\n  if (det === 0) {\n    return this\n  }\n\n  det = 1 / det\n  for (i = 0; i < 16; i++) {\n    d[i] = inv[i] * det\n  }\n\n  return this\n}\n\n/**\n * Calculate the inverse matrix of this, and set to this.\n * @return this\n */\nMatrix4.prototype.invert = function() {\n  return this.setInverseOf(this)\n}\n\n/**\n * Set the orthographic projection matrix.\n * @param left The coordinate of the left of clipping plane.\n * @param right The coordinate of the right of clipping plane.\n * @param bottom The coordinate of the bottom of clipping plane.\n * @param top The coordinate of the top top clipping plane.\n * @param near The distances to the nearer depth clipping plane. This value is minus if the plane is to be behind the viewer.\n * @param far The distances to the farther depth clipping plane. This value is minus if the plane is to be behind the viewer.\n * @return this\n */\nMatrix4.prototype.setOrtho = function(left, right, bottom, top, near, far) {\n  var e, rw, rh, rd\n\n  if (left === right || bottom === top || near === far) {\n    throw 'null frustum'\n  }\n\n  rw = 1 / (right - left)\n  rh = 1 / (top - bottom)\n  rd = 1 / (far - near)\n\n  e = this.elements\n\n  e[0] = 2 * rw\n  e[1] = 0\n  e[2] = 0\n  e[3] = 0\n\n  e[4] = 0\n  e[5] = 2 * rh\n  e[6] = 0\n  e[7] = 0\n\n  e[8] = 0\n  e[9] = 0\n  e[10] = -2 * rd\n  e[11] = 0\n\n  e[12] = -(right + left) * rw\n  e[13] = -(top + bottom) * rh\n  e[14] = -(far + near) * rd\n  e[15] = 1\n\n  return this\n}\n\n/**\n * Multiply the orthographic projection matrix from the right.\n * @param left The coordinate of the left of clipping plane.\n * @param right The coordinate of the right of clipping plane.\n * @param bottom The coordinate of the bottom of clipping plane.\n * @param top The coordinate of the top top clipping plane.\n * @param near The distances to the nearer depth clipping plane. This value is minus if the plane is to be behind the viewer.\n * @param far The distances to the farther depth clipping plane. This value is minus if the plane is to be behind the viewer.\n * @return this\n */\nMatrix4.prototype.ortho = function(left, right, bottom, top, near, far) {\n  return this.concat(\n    new Matrix4().setOrtho(left, right, bottom, top, near, far)\n  )\n}\n\n/**\n * Set the perspective projection matrix.\n * @param left The coordinate of the left of clipping plane.\n * @param right The coordinate of the right of clipping plane.\n * @param bottom The coordinate of the bottom of clipping plane.\n * @param top The coordinate of the top top clipping plane.\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\n * @return this\n */\nMatrix4.prototype.setFrustum = function(left, right, bottom, top, near, far) {\n  var e, rw, rh, rd\n\n  if (left === right || top === bottom || near === far) {\n    throw 'null frustum'\n  }\n  if (near <= 0) {\n    throw 'near <= 0'\n  }\n  if (far <= 0) {\n    throw 'far <= 0'\n  }\n\n  rw = 1 / (right - left)\n  rh = 1 / (top - bottom)\n  rd = 1 / (far - near)\n\n  e = this.elements\n\n  e[0] = 2 * near * rw\n  e[1] = 0\n  e[2] = 0\n  e[3] = 0\n\n  e[4] = 0\n  e[5] = 2 * near * rh\n  e[6] = 0\n  e[7] = 0\n\n  e[8] = (right + left) * rw\n  e[9] = (top + bottom) * rh\n  e[10] = -(far + near) * rd\n  e[11] = -1\n\n  e[12] = 0\n  e[13] = 0\n  e[14] = -2 * near * far * rd\n  e[15] = 0\n\n  return this\n}\n\n/**\n * Multiply the perspective projection matrix from the right.\n * @param left The coordinate of the left of clipping plane.\n * @param right The coordinate of the right of clipping plane.\n * @param bottom The coordinate of the bottom of clipping plane.\n * @param top The coordinate of the top top clipping plane.\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\n * @return this\n */\nMatrix4.prototype.frustum = function(left, right, bottom, top, near, far) {\n  return this.concat(\n    new Matrix4().setFrustum(left, right, bottom, top, near, far)\n  )\n}\n\n/**\n * Set the perspective projection matrix by fovy and aspect.\n * @param fovy The angle between the upper and lower sides of the frustum.\n * @param aspect The aspect ratio of the frustum. (width/height)\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\n * @return this\n */\nMatrix4.prototype.setPerspective = function(fovy, aspect, near, far) {\n  var e, rd, s, ct\n\n  if (near === far || aspect === 0) {\n    throw 'null frustum'\n  }\n  if (near <= 0) {\n    throw 'near <= 0'\n  }\n  if (far <= 0) {\n    throw 'far <= 0'\n  }\n\n  fovy = (Math.PI * fovy) / 180 / 2\n  s = Math.sin(fovy)\n  if (s === 0) {\n    throw 'null frustum'\n  }\n\n  rd = 1 / (far - near)\n  ct = Math.cos(fovy) / s\n\n  e = this.elements\n\n  e[0] = ct / aspect\n  e[1] = 0\n  e[2] = 0\n  e[3] = 0\n\n  e[4] = 0\n  e[5] = ct\n  e[6] = 0\n  e[7] = 0\n\n  e[8] = 0\n  e[9] = 0\n  e[10] = -(far + near) * rd\n  e[11] = -1\n\n  e[12] = 0\n  e[13] = 0\n  e[14] = -2 * near * far * rd\n  e[15] = 0\n\n  return this\n}\n\n/**\n * Multiply the perspective projection matrix from the right.\n * @param fovy The angle between the upper and lower sides of the frustum.\n * @param aspect The aspect ratio of the frustum. (width/height)\n * @param near The distances to the nearer depth clipping plane. This value must be plus value.\n * @param far The distances to the farther depth clipping plane. This value must be plus value.\n * @return this\n */\nMatrix4.prototype.perspective = function(fovy, aspect, near, far) {\n  return this.concat(new Matrix4().setPerspective(fovy, aspect, near, far))\n}\n\n/**\n * Set the matrix for scaling.\n * @param x The scale factor along the X axis\n * @param y The scale factor along the Y axis\n * @param z The scale factor along the Z axis\n * @return this\n */\nMatrix4.prototype.setScale = function(x, y, z) {\n  var e = this.elements\n  e[0] = x\n  e[4] = 0\n  e[8] = 0\n  e[12] = 0\n  e[1] = 0\n  e[5] = y\n  e[9] = 0\n  e[13] = 0\n  e[2] = 0\n  e[6] = 0\n  e[10] = z\n  e[14] = 0\n  e[3] = 0\n  e[7] = 0\n  e[11] = 0\n  e[15] = 1\n  return this\n}\n\n/**\n * Multiply the matrix for scaling from the right.\n * @param x The scale factor along the X axis\n * @param y The scale factor along the Y axis\n * @param z The scale factor along the Z axis\n * @return this\n */\nMatrix4.prototype.scale = function(x, y, z) {\n  var e = this.elements\n  e[0] *= x\n  e[4] *= y\n  e[8] *= z\n  e[1] *= x\n  e[5] *= y\n  e[9] *= z\n  e[2] *= x\n  e[6] *= y\n  e[10] *= z\n  e[3] *= x\n  e[7] *= y\n  e[11] *= z\n  return this\n}\n\n/**\n * Set the matrix for translation.\n * @param x The X value of a translation.\n * @param y The Y value of a translation.\n * @param z The Z value of a translation.\n * @return this\n */\nMatrix4.prototype.setTranslate = function(x, y, z) {\n  var e = this.elements\n  e[0] = 1\n  e[4] = 0\n  e[8] = 0\n  e[12] = x\n  e[1] = 0\n  e[5] = 1\n  e[9] = 0\n  e[13] = y\n  e[2] = 0\n  e[6] = 0\n  e[10] = 1\n  e[14] = z\n  e[3] = 0\n  e[7] = 0\n  e[11] = 0\n  e[15] = 1\n  return this\n}\n\n/**\n * Multiply the matrix for translation from the right.\n * @param x The X value of a translation.\n * @param y The Y value of a translation.\n * @param z The Z value of a translation.\n * @return this\n */\nMatrix4.prototype.translate = function(x, y, z) {\n  var e = this.elements\n  e[12] += e[0] * x + e[4] * y + e[8] * z\n  e[13] += e[1] * x + e[5] * y + e[9] * z\n  e[14] += e[2] * x + e[6] * y + e[10] * z\n  e[15] += e[3] * x + e[7] * y + e[11] * z\n  return this\n}\n\n/**\n * Set the matrix for rotation.\n * The vector of rotation axis may not be normalized.\n * @param angle The angle of rotation (degrees)\n * @param x The X coordinate of vector of rotation axis.\n * @param y The Y coordinate of vector of rotation axis.\n * @param z The Z coordinate of vector of rotation axis.\n * @return this\n */\nMatrix4.prototype.setRotate = function(angle, x, y, z) {\n  var e, s, c, len, rlen, nc, xy, yz, zx, xs, ys, zs\n\n  angle = (Math.PI * angle) / 180\n  e = this.elements\n\n  s = Math.sin(angle)\n  c = Math.cos(angle)\n\n  if (0 !== x && 0 === y && 0 === z) {\n    // Rotation around X axis\n    if (x < 0) {\n      s = -s\n    }\n    e[0] = 1\n    e[4] = 0\n    e[8] = 0\n    e[12] = 0\n    e[1] = 0\n    e[5] = c\n    e[9] = -s\n    e[13] = 0\n    e[2] = 0\n    e[6] = s\n    e[10] = c\n    e[14] = 0\n    e[3] = 0\n    e[7] = 0\n    e[11] = 0\n    e[15] = 1\n  } else if (0 === x && 0 !== y && 0 === z) {\n    // Rotation around Y axis\n    if (y < 0) {\n      s = -s\n    }\n    e[0] = c\n    e[4] = 0\n    e[8] = s\n    e[12] = 0\n    e[1] = 0\n    e[5] = 1\n    e[9] = 0\n    e[13] = 0\n    e[2] = -s\n    e[6] = 0\n    e[10] = c\n    e[14] = 0\n    e[3] = 0\n    e[7] = 0\n    e[11] = 0\n    e[15] = 1\n  } else if (0 === x && 0 === y && 0 !== z) {\n    // Rotation around Z axis\n    if (z < 0) {\n      s = -s\n    }\n    e[0] = c\n    e[4] = -s\n    e[8] = 0\n    e[12] = 0\n    e[1] = s\n    e[5] = c\n    e[9] = 0\n    e[13] = 0\n    e[2] = 0\n    e[6] = 0\n    e[10] = 1\n    e[14] = 0\n    e[3] = 0\n    e[7] = 0\n    e[11] = 0\n    e[15] = 1\n  } else {\n    // Rotation around another axis\n    len = Math.sqrt(x * x + y * y + z * z)\n    if (len !== 1) {\n      rlen = 1 / len\n      x *= rlen\n      y *= rlen\n      z *= rlen\n    }\n    nc = 1 - c\n    xy = x * y\n    yz = y * z\n    zx = z * x\n    xs = x * s\n    ys = y * s\n    zs = z * s\n\n    e[0] = x * x * nc + c\n    e[1] = xy * nc + zs\n    e[2] = zx * nc - ys\n    e[3] = 0\n\n    e[4] = xy * nc - zs\n    e[5] = y * y * nc + c\n    e[6] = yz * nc + xs\n    e[7] = 0\n\n    e[8] = zx * nc + ys\n    e[9] = yz * nc - xs\n    e[10] = z * z * nc + c\n    e[11] = 0\n\n    e[12] = 0\n    e[13] = 0\n    e[14] = 0\n    e[15] = 1\n  }\n\n  return this\n}\n\n/**\n * Multiply the matrix for rotation from the right.\n * The vector of rotation axis may not be normalized.\n * @param angle The angle of rotation (degrees)\n * @param x The X coordinate of vector of rotation axis.\n * @param y The Y coordinate of vector of rotation axis.\n * @param z The Z coordinate of vector of rotation axis.\n * @return this\n */\nMatrix4.prototype.rotate = function(angle, x, y, z) {\n  return this.concat(new Matrix4().setRotate(angle, x, y, z))\n}\n\n/**\n * Set the viewing matrix.\n * @param eyeX, eyeY, eyeZ The position of the eye point.\n * @param centerX, centerY, centerZ The position of the reference point.\n * @param upX, upY, upZ The direction of the up vector.\n * @return this\n */\nMatrix4.prototype.setLookAt = function(\n  eyeX,\n  eyeY,\n  eyeZ,\n  centerX,\n  centerY,\n  centerZ,\n  upX,\n  upY,\n  upZ\n) {\n  var e, fx, fy, fz, rlf, sx, sy, sz, rls, ux, uy, uz\n\n  fx = centerX - eyeX\n  fy = centerY - eyeY\n  fz = centerZ - eyeZ\n\n  // Normalize f.\n  rlf = 1 / Math.sqrt(fx * fx + fy * fy + fz * fz)\n  fx *= rlf\n  fy *= rlf\n  fz *= rlf\n\n  // Calculate cross product of f and up.\n  sx = fy * upZ - fz * upY\n  sy = fz * upX - fx * upZ\n  sz = fx * upY - fy * upX\n\n  // Normalize s.\n  rls = 1 / Math.sqrt(sx * sx + sy * sy + sz * sz)\n  sx *= rls\n  sy *= rls\n  sz *= rls\n\n  // Calculate cross product of s and f.\n  ux = sy * fz - sz * fy\n  uy = sz * fx - sx * fz\n  uz = sx * fy - sy * fx\n\n  // Set to this.\n  e = this.elements\n  e[0] = sx\n  e[1] = ux\n  e[2] = -fx\n  e[3] = 0\n\n  e[4] = sy\n  e[5] = uy\n  e[6] = -fy\n  e[7] = 0\n\n  e[8] = sz\n  e[9] = uz\n  e[10] = -fz\n  e[11] = 0\n\n  e[12] = 0\n  e[13] = 0\n  e[14] = 0\n  e[15] = 1\n\n  // Translate.\n  return this.translate(-eyeX, -eyeY, -eyeZ)\n}\n\n/**\n * Multiply the viewing matrix from the right.\n * @param eyeX, eyeY, eyeZ The position of the eye point.\n * @param centerX, centerY, centerZ The position of the reference point.\n * @param upX, upY, upZ The direction of the up vector.\n * @return this\n */\nMatrix4.prototype.lookAt = function(\n  eyeX,\n  eyeY,\n  eyeZ,\n  centerX,\n  centerY,\n  centerZ,\n  upX,\n  upY,\n  upZ\n) {\n  return this.concat(\n    new Matrix4().setLookAt(\n      eyeX,\n      eyeY,\n      eyeZ,\n      centerX,\n      centerY,\n      centerZ,\n      upX,\n      upY,\n      upZ\n    )\n  )\n}\n\n/**\n * Multiply the matrix for project vertex to plane from the right.\n * @param plane The array[A, B, C, D] of the equation of plane \"Ax + By + Cz + D = 0\".\n * @param light The array which stored coordinates of the light. if light[3]=0, treated as parallel light.\n * @return this\n */\nMatrix4.prototype.dropShadow = function(plane, light) {\n  var mat = new Matrix4()\n  var e = mat.elements\n\n  var dot =\n    plane[0] * light[0] +\n    plane[1] * light[1] +\n    plane[2] * light[2] +\n    plane[3] * light[3]\n\n  e[0] = dot - light[0] * plane[0]\n  e[1] = -light[1] * plane[0]\n  e[2] = -light[2] * plane[0]\n  e[3] = -light[3] * plane[0]\n\n  e[4] = -light[0] * plane[1]\n  e[5] = dot - light[1] * plane[1]\n  e[6] = -light[2] * plane[1]\n  e[7] = -light[3] * plane[1]\n\n  e[8] = -light[0] * plane[2]\n  e[9] = -light[1] * plane[2]\n  e[10] = dot - light[2] * plane[2]\n  e[11] = -light[3] * plane[2]\n\n  e[12] = -light[0] * plane[3]\n  e[13] = -light[1] * plane[3]\n  e[14] = -light[2] * plane[3]\n  e[15] = dot - light[3] * plane[3]\n\n  return this.concat(mat)\n}\n\n/**\n * Multiply the matrix for project vertex to plane from the right.(Projected by parallel light.)\n * @param normX, normY, normZ The normal vector of the plane.(Not necessary to be normalized.)\n * @param planeX, planeY, planeZ The coordinate of arbitrary points on a plane.\n * @param lightX, lightY, lightZ The vector of the direction of light.(Not necessary to be normalized.)\n * @return this\n */\nMatrix4.prototype.dropShadowDirectionally = function(\n  normX,\n  normY,\n  normZ,\n  planeX,\n  planeY,\n  planeZ,\n  lightX,\n  lightY,\n  lightZ\n) {\n  var a = planeX * normX + planeY * normY + planeZ * normZ\n  return this.dropShadow([normX, normY, normZ, -a], [lightX, lightY, lightZ, 0])\n}\n\n/**\n * Constructor of Vector3\n * If opt_src is specified, new vector is initialized by opt_src.\n * @param opt_src source vector(option)\n */\nvar Vector3 = function(opt_src) {\n  var v = new Float32Array(3)\n  if (opt_src && typeof opt_src === 'object') {\n    v[0] = opt_src[0]\n    v[1] = opt_src[1]\n    v[2] = opt_src[2]\n  }\n  this.elements = v\n}\n\n/**\n * Normalize.\n * @return this\n */\nVector3.prototype.normalize = function() {\n  var v = this.elements\n  var c = v[0],\n    d = v[1],\n    e = v[2],\n    g = Math.sqrt(c * c + d * d + e * e)\n  if (g) {\n    if (g == 1) return this\n  } else {\n    v[0] = 0\n    v[1] = 0\n    v[2] = 0\n    return this\n  }\n  g = 1 / g\n  v[0] = c * g\n  v[1] = d * g\n  v[2] = e * g\n  return this\n}\n\n/**\n * Constructor of Vector4\n * If opt_src is specified, new vector is initialized by opt_src.\n * @param opt_src source vector(option)\n */\nvar Vector4 = function(opt_src) {\n  var v = new Float32Array(4)\n  if (opt_src && typeof opt_src === 'object') {\n    v[0] = opt_src[0]\n    v[1] = opt_src[1]\n    v[2] = opt_src[2]\n    v[3] = opt_src[3]\n  }\n  this.elements = v\n}\n\n\n\n// CONCATENATED MODULE: ./src/util.js\nfunction setUniform1f(gl, u_name, val) {\n  var u_val = gl.getUniformLocation(gl.program, u_name)\n  gl.uniform1f(u_val, val)\n}\n\nfunction setUniformMatrix4fv(gl, u_name, val) {\n  var u_val = gl.getUniformLocation(gl.program, u_name)\n  gl.uniformMatrix4fv(u_val, false, val)\n}\n\nfunction bindBuffer(gl, data, attributeName, data_size, step_size, offset) {\n  var Buffer = gl.createBuffer()\n\n  // Write the vertex coordinates and color to the buffer object\n  gl.bindBuffer(gl.ARRAY_BUFFER, Buffer)\n  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW)\n\n  var FSIZE = data.BYTES_PER_ELEMENT\n  // Assign the buffer object to a_Position and enable the assignment\n  var attribute = gl.getAttribLocation(gl.program, attributeName)\n  if (attribute < 0) {\n    console.log('Failed to get the storage location of attribute')\n    return -1\n  }\n  gl.vertexAttribPointer(\n    attribute,\n    data_size,\n    gl.FLOAT,\n    false,\n    FSIZE * step_size,\n    offset\n  )\n  gl.enableVertexAttribArray(attribute)\n}\n\nfunction readShaderFile(gl, fileName, shader) {\n  var request = new XMLHttpRequest()\n\n  request.onreadystatechange = function() {\n    if (request.readyState === 4 && request.status !== 404) {\n      onReadShader(gl, request.responseText, shader)\n    }\n  }\n  request.open('GET', fileName, true) // Create a request to acquire the file\n  request.send() // Send the request\n}\n\n// The shader is loaded from file\nfunction onReadShader(gl, fileString, shader) {\n  if (shader == gl.VERTEX_SHADER) {\n    // Vertex shader\n    VSHADER_SOURCE = fileString\n  } else if (shader == gl.FRAGMENT_SHADER) {\n    // Fragment shader\n    FSHADER_SOURCE = fileString\n  }\n  // When both are available, call start().\n  if (VSHADER_SOURCE && FSHADER_SOURCE) start(gl)\n}\n\nfunction RenderObject(program, data, MMatrix) {\n  this.program = program\n  this.data = data\n  this.MMatrix = MMatrix\n  this.buffer = {}\n}\n\nRenderObject.prototype.bindIndexBuffer = function() {\n  if (this.buffer['index'] == undefined) {\n    this.buffer['index'] = gl.createBuffer()\n  }\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer['index'])\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.data['index'], gl.STATIC_DRAW)\n}\n\nRenderObject.prototype.bindBuffer = function(\n  attribute_name,\n  data_size,\n  step_size,\n  offset,\n  gl\n) {\n  if (this.buffer[attribute_name] == undefined) {\n    this.buffer[attribute_name] = gl.createBuffer()\n  }\n\n  // Write the vertex coordinates and color to the buffer object\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer[attribute_name])\n  gl.bufferData(gl.ARRAY_BUFFER, this.data[attribute_name], gl.STATIC_DRAW)\n\n  var FSIZE = this.data[attribute_name].BYTES_PER_ELEMENT\n  // Assign the buffer object to a_Position and enable the assignment\n  var attribute = gl.getAttribLocation(this.program, attribute_name)\n  if (attribute < 0) {\n    console.log('Failed to get the storage location of attribute')\n    return -1\n  }\n  gl.vertexAttribPointer(\n    attribute,\n    data_size,\n    gl.FLOAT,\n    false,\n    FSIZE * step_size,\n    offset\n  )\n  gl.enableVertexAttribArray(attribute)\n}\n\nRenderObject.prototype.setUniform1f = function(u_name, val, gl) {\n  var u_val = gl.getUniformLocation(this.program, u_name)\n  gl.uniform1f(u_val, val)\n}\n\nRenderObject.prototype.setUniform3f = function(u_name, val, gl) {\n  var u_val = gl.getUniformLocation(this.program, u_name)\n  gl.uniform3fv(u_val, val)\n}\n\nRenderObject.prototype.setUniformMatrix4fv = function(u_name, val, gl) {\n  var u_val = gl.getUniformLocation(this.program, u_name)\n  gl.uniformMatrix4fv(u_val, false, val)\n}\n\n\n\n// CONCATENATED MODULE: ./src/shader/simpleShader.js\nlet simpleShader_VSHADER_SOURCE = `attribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec3 a_Color;\nattribute vec2 a_TexCoord;\n\nuniform mat4 u_vpMatrix;\nuniform mat4 u_mMatrix;\nuniform mat4 u_nMatrix;\n\nvarying vec2 v_TexCoord;\nvarying vec3 v_Normal;\nvarying vec3 v_FragPos; \nvarying vec3 v_Color;\n\nvoid main() {\n   \n    gl_Position = u_vpMatrix * u_mMatrix * a_Position;\n    v_FragPos = vec3( u_mMatrix * a_Position );\n    v_Normal =  a_Normal;  \n    v_Color = a_Color;\n\n    v_TexCoord = a_TexCoord;\n   \n    \n}\n`\nlet simpleShader_FSHADER_SOURCE = `precision mediump float;\nvarying vec2 v_TexCoord;\nvarying vec3 v_Normal;\nvarying vec3 v_FragPos; \nvarying vec3 v_Color;\n\nuniform vec3 u_lightPos;\nuniform vec3 u_lightColor;\nuniform vec3 u_viewPos;\n\nvoid main(){\n    vec3 objectColor = v_Color;\n\n    float ambientStrength = 0.1;\n    float specularStrength = 1.0;\n\n    vec3 ambient = ambientStrength * u_lightColor;\n\n    vec3 lightDir = normalize(u_lightPos - v_FragPos);\n    vec3 norm = normalize(v_Normal);\n\n    float diff = max(dot(norm, lightDir), 0.0);\n    vec3 diffuse = diff * u_lightColor;\n\n    vec3 viewDir = normalize(u_viewPos - v_FragPos);\n    vec3 reflectDir = reflect(-lightDir, norm); \n\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 128.0);\n    vec3 specular = specularStrength * spec * u_lightColor;  \n\n    vec3 result = (ambient + diffuse + specular) * objectColor;\n   \n    gl_FragColor =  vec4(result, 1.0);\n}\n`\n\n\n\n// CONCATENATED MODULE: ./src/object/cube.js\nlet cubeData = {\n  positions: new Float32Array([\n    0.0,\n    0.0,\n    0.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    1.0,\n    0.0,\n    1.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    1.0,\n    1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    1.0,\n\n    1.0,\n    1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    1.0,\n\n    1.0,\n    1.0,\n    1.0,\n\n    0.0,\n    0.0,\n    0.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    1.0,\n    1.0,\n    0.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    1.0,\n    0.0,\n    1.0,\n\n    0.0,\n    1.0,\n    1.0,\n\n    1.0,\n    0.0,\n    1.0,\n\n    0.0,\n    1.0,\n    1.0,\n\n    1.0,\n    1.0,\n    1.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    1.0,\n    0.0,\n    1.0,\n\n    1.0,\n    1.0,\n    1.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    1.0,\n    1.0,\n    0.0,\n\n    1.0,\n    1.0,\n    1.0,\n\n    0.0,\n    0.0,\n    0.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    0.0,\n    1.0,\n    1.0,\n\n    0.0,\n    0.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    1.0\n  ]),\n  normals: new Float32Array([\n    0.0,\n    -1.0,\n    0.0,\n\n    0.0,\n    -1.0,\n    0.0,\n\n    0.0,\n    -1.0,\n    0.0,\n\n    0.0,\n    -1.0,\n    0.0,\n\n    0.0,\n    -1.0,\n    0.0,\n\n    0.0,\n    -1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    0.0,\n    1.0,\n    0.0,\n\n    0.0,\n    0.0,\n    -1.0,\n\n    0.0,\n    0.0,\n    -1.0,\n\n    0.0,\n    0.0,\n    -1.0,\n\n    0.0,\n    0.0,\n    -1.0,\n\n    0.0,\n    0.0,\n    -1.0,\n\n    0.0,\n    0.0,\n    -1.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    0.0,\n    0.0,\n    1.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    1.0,\n    0.0,\n    0.0,\n\n    -1.0,\n    0.0,\n    0.0,\n\n    -1.0,\n    0.0,\n    0.0,\n\n    -1.0,\n    0.0,\n    0.0,\n\n    -1.0,\n    0.0,\n    0.0,\n\n    -1.0,\n    0.0,\n    0.0,\n\n    -1.0,\n    0.0,\n    0.0\n  ]),\n\n  colors: new Float32Array([\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5,\n\n    0.3,\n    1.0,\n    0.5\n  ])\n}\n\n\n\n// CONCATENATED MODULE: ./src/object/object.js\n\n\nclass object_GLObject {\n  constructor() {\n    this.position = undefined\n    this.normal = undefined\n    this.color = undefined\n    this.positionBuffer = undefined\n    this.normalBuffer = undefined\n    this.colorBuffer = undefined\n    this.ModelPosition = { x: 0, y: 0, z: 0 }\n    this.ModelRotation = { x: 0, y: 0, z: 0 }\n    this.ModelMatrix = new Matrix4()\n  }\n\n  setPosition(gl, position) {\n    this.position = position\n    if (this.positionBuffer == undefined) {\n      this.positionBuffer = gl.createBuffer()\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, this.position, gl.STATIC_DRAW)\n    gl.bindBuffer(gl.ARRAY_BUFFER, null)\n  }\n  setNormal(gl, normal) {\n    this.normal = normal\n    if (this.normalBuffer == undefined) {\n      this.normalBuffer = gl.createBuffer()\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.normalBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, this.normal, gl.STATIC_DRAW)\n    gl.bindBuffer(gl.ARRAY_BUFFER, null)\n  }\n  setColor(gl, color) {\n    this.color = color\n    if (this.color != undefined) {\n      if (this.colorBuffer == undefined) {\n        this.colorBuffer = gl.createBuffer()\n      }\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer)\n      gl.bufferData(gl.ARRAY_BUFFER, this.color, gl.STATIC_DRAW)\n      gl.bindBuffer(gl.ARRAY_BUFFER, null)\n    }\n  }\n\n  setModelPosition(x, y, z) {\n    this.ModelPosition = { x: x, y: y, z: z }\n    this.ModelMatrix = new Matrix4()\n    this.ModelMatrix.setTranslate(\n      this.ModelPosition.x,\n      this.ModelPosition.y,\n      this.ModelPosition.z\n    )\n  }\n\n  setModelRotation(x, y, z) {\n    this.ModelRotation = { x: x, y: y, z: z }\n    this.ModelMatrix = new Matrix4()\n    this.ModelMatrix.setTranslate(\n      this.ModelRotation.x,\n      this.ModelRotation.y,\n      this.ModelRotation.z\n    )\n  }\n\n  setModelMatrix(gl) {}\n\n  setAll(gl, position, normal, color) {\n    this.setPosition(gl, position)\n    this.setNormal(gl, normal)\n    this.setColor(gl, color)\n  }\n}\n\n\n\n// CONCATENATED MODULE: ./src/shader/program.js\nclass GLProgram {\n  constructor(program) {\n    this.program = program\n    this.DataByteSize = undefined\n  }\n\n  drawElement(gl, DataLength) {\n    gl.drawArrays(gl.TRIANGLES, 0, DataLength / 3)\n  }\n\n  setProgram(program) {\n    this.program = program\n  }\n\n  setAttribute(gl, buffer, data_size, attribute_name) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n    var attribute = gl.getAttribLocation(this.program, attribute_name)\n    if (attribute < 0) {\n      console.log('Failed to get the storage location of attribute')\n      return -1\n    }\n    let FSIZE\n    if (this.DataByteSize == undefined) {\n      FSIZE = 4\n    }\n\n    gl.vertexAttribPointer(\n      attribute,\n      data_size,\n      gl.FLOAT,\n      false,\n      FSIZE * data_size,\n      0\n    )\n    gl.enableVertexAttribArray(attribute)\n    gl.bindBuffer(gl.ARRAY_BUFFER, null)\n  }\n\n  setUniform1f(gl, u_name, val) {\n    let u_val = gl.getUniformLocation(this.program, u_name)\n    gl.uniform1f(u_val, val)\n  }\n\n  setUniform3fv(gl, u_name, val) {\n    let u_val = gl.getUniformLocation(this.program, u_name)\n    gl.uniform3fv(u_val, val)\n  }\n\n  setUniformMatrix4fv(gl, u_name, val) {\n    let u_val = gl.getUniformLocation(this.program, u_name)\n    gl.uniformMatrix4fv(u_val, false, val)\n  }\n}\n\n\n\n// CONCATENATED MODULE: ./src/scene/scene.js\n\n\n\n\nclass scene_GLScene {\n  constructor(canvas) {\n    this.canvas = canvas\n    this.gl = getWebGLContext(canvas)\n    this.programs = {}\n    this.activeProgram = undefined\n    this.objects = {}\n    this.cameraPosition = undefined\n  }\n\n  setProgram(name, program) {\n    this.programs[name] = program\n  }\n\n  useProgram(name) {\n    useProgram(this.gl, this.programs[name].program)\n    this.activeProgram = this.programs[name]\n  }\n\n  defaultSetting() {\n    this.gl.enable(this.gl.DEPTH_TEST)\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)\n  }\n\n  addObject(name, globject) {\n    this.objects[name] = globject\n  }\n\n  setDirectionalLight(x, y, z) {\n    let lightDirection = new Float32Array([-x, -y, -z])\n    this.activeProgram.setUniform3fv(\n      this.gl,\n      'u_lightDirection',\n      lightDirection\n    )\n  }\n  setLightPos(x, y, z) {\n    let lightPos = new Float32Array([x, y, z])\n    this.activeProgram.setUniform3fv(this.gl, 'u_lightPos', lightPos)\n  }\n\n  setLightColor(r, g, b) {\n    let lightColor = new Float32Array([r, g, b])\n    this.activeProgram.setUniform3fv(this.gl, 'u_lightColor', lightColor)\n  }\n\n  setViewPos() {\n    let viewPos = new Float32Array([\n      this.cameraPosition.x,\n      this.cameraPosition.y,\n      this.cameraPosition.z\n    ])\n    this.activeProgram.setUniform3fv(this.gl, 'u_viewPos', viewPos)\n  }\n\n  clear() {\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)\n  }\n\n  draw() {\n    for (let objectName in this.objects) {\n      let dataLength = this.objects[objectName].position.length / 3\n      this.activeProgram.setUniformMatrix4fv(\n        this.gl,\n        'u_mMatrix',\n        this.objects[objectName].ModelMatrix.elements\n      )\n\n      this.bindAttribute(objectName)\n\n      this.gl.drawArrays(this.gl.TRIANGLES, 0, dataLength)\n    }\n  }\n\n  setPerspectiveCamera(cameraPosition, targetPosition) {\n    var vpMatrix = new Matrix4()\n    this.cameraPosition = cameraPosition\n    vpMatrix.setPerspective(30, 1, 1, 100)\n    vpMatrix.lookAt(\n      cameraPosition.x,\n      cameraPosition.y,\n      cameraPosition.z,\n      targetPosition.x,\n      targetPosition.y,\n      targetPosition.z,\n      0,\n      1,\n      0\n    )\n    this.activeProgram.setUniformMatrix4fv(\n      this.gl,\n      'u_vpMatrix',\n      vpMatrix.elements\n    )\n  }\n\n  bindAttribute(name) {\n    this.activeProgram.setAttribute(\n      this.gl,\n      this.objects[name].positionBuffer,\n      3,\n      'a_Position'\n    )\n    this.activeProgram.setAttribute(\n      this.gl,\n      this.objects[name].normalBuffer,\n      3,\n      'a_Normal'\n    )\n    this.activeProgram.setAttribute(\n      this.gl,\n      this.objects[name].colorBuffer,\n      3,\n      'a_Color'\n    )\n  }\n}\n\n\n\n// CONCATENATED MODULE: ./src/index2.js\n\n\n\n\n\n\n\n\n\nlet scene\n\nfunction main() {\n  let canvas = document.getElementById('webgl')\n  if (!canvas) {\n    console.log('Failed to retrieve the <canvas> element')\n  }\n  scene = new scene_GLScene(canvas)\n  index2_start()\n\n  document.addEventListener('keydown', keyPress)\n}\n\nmain()\n\nfunction index2_start() {\n  let program = createProgram(scene.gl, simpleShader_VSHADER_SOURCE, simpleShader_FSHADER_SOURCE)\n  let glprogram = new GLProgram(program)\n  scene.setProgram('simple', glprogram)\n  scene.useProgram('simple')\n  scene.defaultSetting()\n\n  let floor = new object_GLObject()\n  floor.setAll(scene.gl, cubeData.positions, cubeData.normals, cubeData.colors)\n  floor.setModelPosition(-0.5, 0, -0.5)\n  scene.addObject('floor', floor)\n\n  let floor2 = new object_GLObject()\n  floor2.setAll(scene.gl, cubeData.positions, cubeData.normals, cubeData.colors)\n  floor2.setModelPosition(0.5, 0, 0.5)\n  scene.addObject('floor2', floor2)\n\n  let floor3 = new object_GLObject()\n  floor3.setAll(scene.gl, cubeData.positions, cubeData.normals, cubeData.colors)\n  floor3.setModelPosition(1.5, 0, 1.5)\n  scene.addObject('floor3', floor3)\n\n  let theta = 2\n  //   scene.setDirectionalLight(2.5, 1.5, 0.5)\n  scene.setLightPos(-4.5, 6.5, -4)\n  scene.setLightColor(0.4, 1, 0)\n  let cameraPosition = {\n    x: 10,\n    y: 11,\n    z: 10\n  }\n  let targetPosition = {\n    x: 0,\n    y: 0,\n    z: 0\n  }\n\n  scene.setPerspectiveCamera(cameraPosition, targetPosition)\n  scene.setViewPos()\n\n  scene.clear()\n  scene.draw()\n}\n\nfunction keyPress(key) {\n  console.log(key)\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      // Left pressed\n      theta -= 0.1\n      break\n    case 'ArrowRight':\n      // Right pressed\n      theta += 0.1\n      break\n    case 'ArrowUp':\n      // Up pressed\n      break\n    case 'ArrowDown':\n      // Down pressed\n      break\n  }\n\n  drawElement()\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);